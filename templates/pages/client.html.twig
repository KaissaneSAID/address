

    {% block body %}
    {% include 'bases/header.html.twig' %}
        <div style="float:right; margin-right:20px;font-size:20px;" class="container-xl col-md-9" style="font-family: 'Roboto', sans-serif;">
            <div class="table-responsive">
                <div class="table-wrapper">
                    <div class="table-title" >
                        <div class="row" >
                            <div  class="col-sm-8"><h2 style="font-size:30px; margin-bottom:20px;"><b>Liste des Clients</b></h2></div>
                            <div  class="col-sm-8"><h2 ><button style="font-size:20px" type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" >Ajout Client</button></h2></div>
                        
    <!-- Ajoutez ce bloc dans votre template Twig -->
    <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editModalLabel">Modifier le client</h5>
                </div>
                <div class="modal-body">
                    <form id="editForm" action="" method="post">
                        <!-- Ajoutez les champs de formulaire avec les valeurs pré-remplies -->
                        <input type="hidden" id="editClientId" name="clientId" value="">
                        <div class="mb-3">
                            <label for="editNDossier" class="col-form-label">Numerdo de dossier:</label>
                            <input type="text" style="color:black" class="form-control" id="editNDossier" name="NDossier" required>
                        </div>
                        <div class="mb-3">
                                                <label for="editNom" class="col-form-label">Utilisateur:</label>
                                                <input style="color:black" type="text" class="form-control"  placeholder="KATECH" required name="Nom" id="editNom">
                                            </div>
                                            <div class="mb-3">
                                                <label for="editContact" class="col-form-label">Contact (Fixe/mobile):</label>
                                                <input style="color:black" type="text" class="form-control"  placeholder="Moroni Hamdraba" required name="Contact" id="editContact">
                                            </div>
                                            <div class="mb-3">
                                                <label for="editLocalite" class="col-form-label">Localité</label>
                                                <input style="color:black" type="text" class="form-control"  placeholder="Mdjoiezi" required name="Localite" id="editLocalite">
                                            </div>
                                            <div class="mb-3">
                                                <label for="editadresse" class="col-form-label">IP Adresse</label>
                                                <input style="color:black" type="text" class="form-control"  placeholder="197.255.232.20" required name="Ipaddress" id="editadresse">
                                            </div>
                                            <div class="mb-3">
                                                <label for="editmasque" class="col-form-label">Masque</label>
                                                <input style="color:black" type="text" class="form-control"  placeholder="255.255.255.0" required name="Masque" id="editmasque">
                                            </div>
                                            <div class="mb-3">
                                                <label for="editpasserelle" class="col-form-label">Passerelle</label>
                                                <input style="color:black" type="text" class="form-control" required name="Passerelle" placeholder="197.255.232.1" id="editPasserelle">
                                            </div>
                                            <div class="mb-3">
                                                <label for="recipient-name" class="col-form-label">TypeConnexion</label>
                                                <select name="edittypeConnexionId" class="form-control" aria-label="Default select example">
                                                    {% for typeConnexion in typesConnexion %}
                                                    <option id="edittypeConnexionId"  value="{{ typeConnexion.id }}" >{{ typeConnexion.name }}</option>
                                                    {% endfor %}
                                                </select>
                                            </div>
                        <!-- Ajoutez les autres champs de formulaire pour l'édition -->
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                    <button type="submit" class="btn btn-primary" form="editForm">Enregistrer les modifications</button>
                </div>
                    </form>
                </div>
            </div>
        </div>
    </div>


                            <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                            <div class="modal-dialog" >
                                <div class="modal-content">
                                <div class="modal-header">
                                    <h1 class="modal-title fs-5" id="exampleModalLabel">Ajouter un client</h1>
                                </div>
                                    <div class="modal-body">
                                    <form id="Form" action="{{ path('app_create') }}" method="post">
                                            <div class="mb-3">
                                                <label for="NDossier" class="col-form-label">Numero de dossier:</label>
                                                <input type="text" class="form-control"  placeholder="018/11" required name="NDossier" id="NDossier">
                                            </div>
                                            <div class="mb-3">
                                                <label for="Nom" class="col-form-label">Utilisateur:</label>
                                                <input type="text" class="form-control"  placeholder="KATECH" required name="Nom" id="Nom">
                                            </div>
                                            <div class="mb-3">
                                                <label for="Contact" class="col-form-label">Contact (Fixe/mobile):</label>
                                                <input type="text" class="form-control"  placeholder="Moroni Hamdraba" required name="Contact" id="Contact">
                                            </div>
                                            <div class="mb-3">
                                                <label for="Localite" class="col-form-label">Localité</label>
                                                <input type="text" class="form-control"  placeholder="Mdjoiezi" required name="Localite" id="Localite">
                                            </div>
                                            <div class="mb-3">
                                                <label for="adresse" class="col-form-label">IP Adresse</label>
                                                <input type="text" class="form-control"  placeholder="197.255.232.20" required name="Ipaddress" id="adresse">
                                            </div>
                                            <div class="mb-3">
                                                <label for="masque" class="col-form-label">Masque</label>
                                                <input type="text" class="form-control"  placeholder="255.255.255.0" required name="Masque" id="masque">
                                            </div>
                                            <div class="mb-3">
                                                <label for="recipient-name" class="col-form-label">Passerelle</label>
                                                <input type="text" class="form-control" required name="Passerelle" required placeholder="197.255.232.1" id="passerelle">
                                            </div>
                                            <div class="mb-3">
                                                <label for="recipient-name" class="col-form-label">TypeConnexion</label>
                                                <select name="typeConnexionId" class="form-control" aria-label="Default select example">
                                                    {% for typeConnexion in typesConnexion %}
                                                    <option value="{{ typeConnexion.id }}" >{{ typeConnexion.name }}</option>
                                                    {% endfor %}
                                                </select>
                                            </div>

                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                                            <button type="submit" class="btn btn-primary">Ajouter</button>
                                        </div>
                                    </form>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-sm-4">
                                <div class="search-box">
                                    <form id="myForm" action="{{ path('app_sea') }}" method="post">
                                        <input  id="textInput" value="{{searchQuery}}"  style="font-size:20px; height: 45px; border-radius:5px;" type="text" class="form-control" name="q" value="" placeholder="utilisateur ou par adresse ip">
                                        <button type="submit" id="hiddenSubmitButton" style="display: none;"></button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                            {% if clients is empty %}
                    <p style="font-size:44px;text-align:center">Aucun client trouvé pour la recherche <b style="font-size:44px;"> "{{searchQuery}}"</b>.</p>
                {% else %}
                    <table class="table table-striped table-hover table-bordered" style="font-size:18px;">
                        <thead>
                            <tr>
                                <th>N°Dossier</th>
                                <th>Utilisateur<i class="fa fa-sort"></i></th>
                                <th>Contact (Fixe/mobile)</th>
                                <th>Localité<i class="fa fa-sort"></i></th>
                                <th>IP Adresse<i class="fa fa-sort"></i></th>
                                <th>Masque<i class="fa fa-sort"></i></th>
                                <th>Passerelle<i class="fa fa-sort"></i></th>
                                <th>Type de Connexion<i class="fa fa-sort"></i></th>
                                <th>Date attribution</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id="table-body">
                        {% for client in clients %}
                    
                            <tr>
                                <td>{{ client.getNDossier() }}</td>
                                <td>{{ client.getNom() }}</td>
                                <td>{{ client.getContacts() }}</td>
                                <td>{{ client.getLocalite() }}</td>
                                <td>{{ client.getIpaddress() }}</td>
                                <td>{{ client.getMasque() }}</td>
                                <td>{{ client.getPasserelle() }}</td>
                                <td>{{ client.typeConnexion.name}}
                                </td>
                                {% if client.getDate() != "" %}
                                    
                                <td>{{ client.getDate() }}</td>
                                {% else %}
                                <td>{{ client.getDateAttribue() | date('d/m/Y') }}</td>

                                {% endif %}
                                
                                <td>
                            
                                <a style="display:inline;" href="#" class="editBtn" data-bs-toggle="modal" data-bs-target="#editModal" data-client-id="{{ client.id }}"><i style="color:green" class="bi bi-pencil-square" title="Editer"></i></a> <a href="{{ path('delete_client', { 'id': client.id }) }}" style="color:red"><i class="bi bi-trash3-fill" onclick="return confirm('Êtes-vous sûr de vouloir supprimer ce client ?')" title="Suprimer"></i></a>
                                </td>
                            </tr>
                            {% endfor %}         
                        </tbody>
                    </table>
                    
                    <div class="clearfix">
                        <div style="font-size:20px;" class="hint-text"></div>
                        <ul style="font-size:24px;" class="pagination" id="pagination">
                            </ul>
                    </div>
                    {% endif %}
                </div>
            </div>  
        </div> 

    {% include 'bases/slidebar.html.twig' %}

    <script>

document.addEventListener("DOMContentLoaded", function () {
    const editButtons = document.querySelectorAll('.editBtn');

    editButtons.forEach(button => {
        button.addEventListener('click', function () {
            const clientId = this.getAttribute('data-client-id');
            fetch(`/client/${clientId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Client not found');
                    }
                    return response.json();
                })
                .then(client => {
                    populateEditModal(client);
                })
                .catch(error => {
                    console.error('Error fetching client details:', error);
                    // Gérer l'erreur ici, par exemple afficher un message à l'utilisateur
                });
        });
    });

    function populateEditModal(client) {
        // Remplir les champs de la modal d'édition avec les détails du client
        document.getElementById('editClientId').value = client.id;
        document.getElementById('editNDossier').value = client.NDossier;
        document.getElementById('editNom').value = client.Nom;
        document.getElementById('editContact').value = client.Contact;
        document.getElementById('editLocalite').value = client.Localite;
        document.getElementById('editadresse').value = client.Ipaddress;
        document.getElementById('editmasque').value = client.Masque;
        document.getElementById('editPasserelle').value = client.Passerelle;
        document.getElementById('edittypeConnexionId').value = client.typeConnexion.name;
        // Remplir les autres champs de formulaire pour l'édition
    }
});

document.addEventListener("DOMContentLoaded", function () {
    const editForm = document.getElementById('Form');
    const editAdresseInput = document.getElementById('adresse');
    const editMasqueInput = document.getElementById('masque');
    const editpasserelleInput = document.getElementById('passerelle');

    // Expression régulière pour valider l'adresse IP au format xxx.xxx.xxx.xxx
    const ipRegex = /^(\d{1,3}\.){3}\d{1,3}$/;

    // Expression régulière pour valider le masque au format xxx.xxx.xxx.xxx
    const masqueRegex = /^(255|254|252|248|240|224|192|128|0)+(\.((255|254|252|248|240|224|192|128|0)+(\.((255|254|252|248|240|224|192|128|0)+(\.(255|254|252|248|240|224|192|128|0))?)?)?)?)?$/;

    // Ajouter un événement de validation pour l'adresse IP lors de la soumission du formulaire
    editForm.addEventListener('submit', function (event) {
        if (!ipRegex.test(editAdresseInput.value)) {
            alert("Veuillez saisir une adresse IP valide au format xxx.xxx.xxx.xxx");
            event.preventDefault(); // Empêcher la soumission du formulaire si l'adresse IP est invalide
        }

         if (!ipRegex.test(editpasserelleInput.value)) {
            alert("Veuillez saisir une passerelle  valide au format xxx.xxx.xxx.xxx");
            event.preventDefault(); // Empêcher la soumission du formulaire si l'adresse IP est invalide
        }
        if (!masqueRegex.test(editMasqueInput.value)) {
            alert("Veuillez saisir un masque valide au format xxx.xxx.xxx.xxx");
            event.preventDefault(); // Empêcher la soumission du formulaire si le masque est invalide
        }
    });

    // Vous pouvez également ajouter des événements de validation lors de la saisie de l'utilisateur pour fournir un feedback en temps réel
    editAdresseInput.addEventListener('input', function () {
        if (!ipRegex.test(editAdresseInput.value)) {
            editAdresseInput.setCustomValidity("Veuillez saisir une adresse IP valide au format xxx.xxx.xxx.xxx");
        } else {
            editAdresseInput.setCustomValidity("");
        }
    });

    editMasqueInput.addEventListener('input', function () {
        if (!masqueRegex.test(editMasqueInput.value)) {
            editMasqueInput.setCustomValidity("Veuillez saisir un masque valide au format xxx.xxx.xxx.xxx");
        } else {
            editMasqueInput.setCustomValidity("");
        }
    });
});


    document.addEventListener("DOMContentLoaded", function () {
        const pagination = document.getElementById('pagination');
        const tableRows = document.querySelectorAll('#table-body tr');
        const hintText = document.querySelector('.hint-text'); // Sélection de l'élément avec la classe hint-text
        
        const rowsPerPage = 7;
        let currentPage = 1;

        function showRows(page) {
            const startIndex = (page - 1) * rowsPerPage;
            const endIndex = startIndex + rowsPerPage;
            tableRows.forEach((row, index) => {
                if (index >= startIndex && index < endIndex) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        }

        function updatePagination() {
            const totalPages = Math.ceil(tableRows.length / rowsPerPage);
            pagination.innerHTML = '';

            for (let i = 1; i <= totalPages; i++) {
                const li = document.createElement('li');
                li.classList.add('page-item');
                if (i === currentPage) {
                    li.classList.add('active');
                }
                const link = document.createElement('a');
                link.href = '#';
                link.classList.add('page-link');
                link.innerText = i;
                link.addEventListener('click', function (event) {
                    event.preventDefault();
                    currentPage = i;
                    showRows(currentPage);
                    updatePagination();
                    updateHintText(); // Mettre à jour le texte de hint-text à chaque changement de page
                });
                li.appendChild(link);
                pagination.appendChild(li);
            }
        }

        function updateHintText() {
            const startIndex = (currentPage - 1) * rowsPerPage + 1;
            const endIndex = Math.min(currentPage * rowsPerPage, tableRows.length);
            hintText.innerHTML = `affichage de <b>${startIndex}-${endIndex}</b> lignes sur  <b>${tableRows.length}</b> lignes`;
        }

        showRows(currentPage);
        updatePagination();
        updateHintText(); // Appel initial pour mettre à jour le texte hint-text
    });

            function submitForm() {
                document.getElementById('myForm').submit();
            }

            // Récupère l'élément input
            const inputField = document.getElementById('textInput');

            // Ajoute un écouteur d'événement sur l'élément input pour détecter les modifications
            inputField.addEventListener('input', function(event) {
                // Vous pouvez ajouter ici des conditions pour vérifier si l'utilisateur a terminé de saisir
                // Par exemple, vous pouvez vérifier la longueur de la chaîne ou s'il y a un caractère spécifique
            });

            // Ajoute un écouteur d'événement sur l'élément input pour détecter la touche "Entrée"
            inputField.addEventListener('keypress', function(event) {
                // Vérifie si la touche pressée est la touche "Entrée" (keyCode 13 ou charCode 13)
                if (event.key === 'Enter' || event.keyCode === 13 || event.charCode === 13) {
                    // Empêche le comportement par défaut du formulaire (envoi via le bouton submit)
                    event.preventDefault();

                    // Appelle la fonction pour soumettre le formulaire
                    submitForm();
                }
            });
    </script>

    {% endblock %}
